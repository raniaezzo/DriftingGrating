clc; clear all; close all;

% set up
addpath(genpath(pwd));
projectName = 'da';
bidsDir =  '/Volumes/Vision/UsersShare/Rania/Project_dg/data_bids/';
%bidsDir = '/Volumes/server/Projects/Project_dg/data_bids/';
githubDir = '~/Documents/GitHub';
fsDir = '/Applications/freesurfer'; %/7.2.0';
%addpath(genpath(fullfile(githubDir, 'retinotopy-nyuad')));
addpath(genpath(fullfile(githubDir, 'wpToolbox')));
addpath(genpath(fullfile(githubDir, 'atlasmgz')));
%setup_user(projectName,bidsDir,githubDir,fsDir);
setup_user('rania',bidsDir);
masksFolder = fullfile(bidsDir, 'derivatives', 'masks');
retinotopyMode = 'moving'; % of 'flicker' to use for analysis

hRF_setting = 'glmsingle'; % can be: 'canonical', 'glmdenoise', 'glmsingle';

hemis = {'lh'; 'rh'};

[rois, axes_limits, colors_data, contrasts_dict] = loadConfig(githubDir);

contrastnames = {contrasts_dict.contrasts.(strcat(projectName, '_contrast_name'))};

colors = colors_data.conditions.(projectName);

% % replaced below to pairwise (sep): 'cardmVcards', 'oblmVobls'
% contrastnames = {'cardMsep', 'oblMsep', 'allmValls', ...
%     'allsVblank', 'allmVblank', 'cardmVblank', 'oblmVblank', ...
%     'm0_v_s90','m90_v_s0','m180_v_s90','m270_v_s0', ...
%     'm45_v_s135','m135_v_s45','m225_v_s135','m315_v_s45', 'cardsVblank', 'oblsVblank', ...
%      'm0_v_b', 'm180_v_b', 'm90_v_b', 'm270_v_b', 'm45_v_b', 'm225_v_b', 'm135_v_b', ...
%      'm315_v_b', 's0_v_b', 's90_v_b', 's45_v_b', 's135_v_b'};

if strcmp(projectName, 'dg')
    subjects = {'sub-0037', 'sub-0201', 'sub-0255', 'sub-0397', ...
        'sub-0442', 'sub-wlsubj121', ...
        'sub-wlsubj123', 'sub-wlsubj124', 'sub-wlsubj127', 'sub-0395', 'sub-0426', ...
        'sub-0427', 'sub-0250'}; % last 3 were originally omitted 
elseif strcmp(projectName, 'da')
    subjects = {'sub-0037', 'sub-0201', 'sub-0255', 'sub-wlsubj123', 'sub-wlsubj124', ...
        'sub-0395', 'sub-0426'};
end

indiv_contrastnames = {'m0_v_s90','m90_v_s0','m180_v_s90','m270_v_s0', ...
    'm45_v_s135','m135_v_s45','m225_v_s135','m315_v_s45'};
% Return contrast names as vector of motion dirs
pattern = 'm(\d+)_';
% Apply regular expression to each element in the cell array
matches = cellfun(@(str) regexp(str, pattern, 'tokens'), indiv_contrastnames, 'UniformOutput', false);
% Extract the numeric part and convert to a vector of integers
motiondirs = cellfun(@(match) str2double(match{1}), matches);

% update contrast names:
% contrastnames = [contrastnames, indiv_contrastnames];

polarAngles = [0, 45, 90, 135, 180, -135, -90, -45];
polarAngleBinWidth = 45; %45; % degrees
minECC = 1; %0.2; 
maxECC = 15;
minVAREXP = .1; %0.25;

% initialize a matrix for contrasts, rois, subjects
meanBOLD = nan(length(contrastnames), length(rois), length(subjects));
medianBOLD = nan(length(contrastnames), length(rois), length(subjects));

meanBOLDpa = nan(length(contrastnames), length(polarAngles), length(rois), length(subjects));
medianBOLDpa = nan(length(contrastnames),length(polarAngles), length(rois), length(subjects));
countBin = nan(length(polarAngles), length(rois), length(subjects));

nPreallVoxel = 2000;
allvoxelsBOLDpa = nan(length(contrastnames), length(polarAngles), length(rois), nPreallVoxel, length(subjects));
allparamsBOLDpa = nan(length(contrastnames), length(polarAngles), length(rois), nPreallVoxel, 4, length(subjects)); % pa, eccen, r^2
%%

for si=1:numel(subjects)

    subjectname = subjects{si}

    subj_FSfolder = fullfile(bidsDir, 'derivatives', 'freesurfer', subjectname);
    
    glmResultsfolder = fullfile(bidsDir, 'derivatives', strcat(projectName, 'GLM'), strcat('hRF_', hRF_setting), subjectname);
    glmFilelist = dir(fullfile(glmResultsfolder, '**', 'results.mat'));
    [~,ses_glm] = fileparts(glmFilelist.folder); % not needed
    glmFolder = fullfile(glmResultsfolder, ses_glm); % not needed
    betaResults = load(fullfile(glmFilelist.folder, glmFilelist.name));
    betaResults = betaResults.results;
    
    % load in pRF data for that subject (flicker)
%     flickerRetDir = dir(fullfile(bidsDir, 'derivatives', 'prfvista', subjectname, '**/stimfiles.mat'));
%     flickerRetDir = flickerRetDir.folder;
    movingRetDir = dir(fullfile(bidsDir, 'derivatives', 'prfvista_mov', subjectname, '**/stimfiles.mat'));
    movingRetDir = movingRetDir.folder;
    
    for hi=1:numel(hemis)
        hemi = hemis{hi};
%         ret_flicker.(sprintf('%s_pa', hemi)) = MRIread(fullfile(flickerRetDir, sprintf('%s.angle_adj.mgz', hemi)));
%         ret_flicker.(sprintf('%s_ecc', hemi)) = MRIread(fullfile(flickerRetDir, sprintf('%s.eccen.mgz', hemi)));
%         ret_flicker.(sprintf('%s_vexp', hemi)) = MRIread(fullfile(flickerRetDir, sprintf('%s.vexpl.mgz', hemi)));
%         ret_flicker.(sprintf('%s_sigma', hemi)) = MRIread(fullfile(flickerRetDir, sprintf('%s.sigma.mgz', hemi)));
        ret_moving.(sprintf('%s_pa', hemi)) = MRIread(fullfile(movingRetDir, sprintf('%s.angle_adj.mgz', hemi)));
        ret_moving.(sprintf('%s_ecc', hemi)) = MRIread(fullfile(movingRetDir, sprintf('%s.eccen.mgz', hemi)));
        ret_moving.(sprintf('%s_vexp', hemi)) = MRIread(fullfile(movingRetDir, sprintf('%s.vexpl.mgz', hemi)));
        ret_moving.(sprintf('%s_sigma', hemi)) = MRIread(fullfile(movingRetDir, sprintf('%s.sigma.mgz', hemi)));
        
        for cc=1:numel(indiv_contrastnames)
            cond = indiv_contrastnames{cc};
            mot_v_stat.(sprintf('%s_%s', hemi,cond)) = MRIread(fullfile(glmFilelist.folder, sprintf('%s.%s.mgz', hemi, cond)));
        end
    end
    
%     retFlickerData = [ret_flicker.lh_pa.vol, ret_flicker.rh_pa.vol ; ...
%         ret_flicker.lh_ecc.vol, ret_flicker.rh_ecc.vol ; ...
%         ret_flicker.lh_vexp.vol, ret_flicker.rh_vexp.vol; ...
%         ret_flicker.lh_sigma.vol, ret_flicker.rh_sigma.vol];
    
    retMovingData = [ret_moving.lh_pa.vol, ret_moving.rh_pa.vol ; ...
        ret_moving.lh_ecc.vol, ret_moving.rh_ecc.vol ; ...
        ret_moving.lh_vexp.vol, ret_moving.rh_vexp.vol; ...
        ret_moving.lh_sigma.vol, ret_moving.rh_sigma.vol];

    indvCondData = [mot_v_stat.lh_m0_v_s90.vol', mot_v_stat.rh_m0_v_s90.vol' ; ...
        mot_v_stat.lh_m90_v_s0.vol', mot_v_stat.rh_m90_v_s0.vol' ; ...
        mot_v_stat.lh_m180_v_s90.vol', mot_v_stat.rh_m180_v_s90.vol'; ...
        mot_v_stat.lh_m270_v_s0.vol', mot_v_stat.rh_m270_v_s0.vol'; ...
        mot_v_stat.lh_m45_v_s135.vol', mot_v_stat.rh_m45_v_s135.vol'; ...
        mot_v_stat.lh_m135_v_s45.vol', mot_v_stat.rh_m135_v_s45.vol'; ...
        mot_v_stat.lh_m225_v_s135.vol', mot_v_stat.rh_m225_v_s135.vol'; ...
        mot_v_stat.lh_m315_v_s45.vol', mot_v_stat.rh_m315_v_s45.vol'];


    if strcmp(retinotopyMode, 'moving')
        retData = retMovingData;
    elseif strcmp(retinotopyMode, 'flicker')
        retData = retFlickerData;
    end

    % get lh, rh sizes:
    hSize = get_surfsize(subjectname); 
    
    % create matrix of mean values per ROI (V1, V2, V3, MT+):
    
    for ci=1:numel(contrastnames)
    
        contrastname = contrastnames{ci};
    
        for ri=1:numel(rois)
        
            roiname = rois{ri};
        
            if strcmp(roiname, 'V2') || strcmp(roiname, 'V3') % combine dorsal and ventral
                lh_label1 = read_label(subjectname, sprintf('retinotopy_RE/lh.%sv_REmanual', roiname));
                lh_label2 = read_label(subjectname, sprintf('retinotopy_RE/lh.%sd_REmanual', roiname));
                rh_label1 = read_label(subjectname, sprintf('retinotopy_RE/rh.%sv_REmanual', roiname));
                rh_label2 = read_label(subjectname, sprintf('retinotopy_RE/rh.%sd_REmanual', roiname));

                label_idx = [lh_label1(:,1)+1 ; lh_label2(:,1)+1; rh_label1(:,1)+hSize(1)+1; rh_label2(:,1)+hSize(1)+1];
            else
                % columns: vertex index, x, y, z, value
                lh_label = read_label(subjectname, sprintf('retinotopy_RE/lh.%s_REmanual', roiname));
                rh_label = read_label(subjectname, sprintf('retinotopy_RE/rh.%s_REmanual', roiname));
        
                %rh_label = read_label(subjectname, 'Glasser2016/rh.MT');
        
                % plus one because matlab starts from 1 not 0
                label_idx = [lh_label(:,1)+1 ; rh_label(:,1)+hSize(1)+1];
            end

            
    
            % load in results (units are in PSC)
            propername = strrep(contrastname, '_v_','V');
            currBold = betaResults.contrasts.(propername);
                
            % get the currBOLD
            meanBOLD(ci, ri, si) = mean(currBold(label_idx));
            medianBOLD(ci, ri, si) = median(currBold(label_idx));

            % make mask (mgz) and save 
            mask = zeros(size(currBold));
            mask(label_idx) = 1;
            writeMGZfile(bidsDir, subjectname, '', mask, masksFolder, sprintf('%smask',roiname))
    
            % loop through pa bins:
            for pa=1:numel(polarAngles)
                pangle = polarAngles(pa);

                if pangle == -180 % cannot be -180
                    pangle = 180;
                end
                
                % Calculate the lower and upper bounds of the angular bin
                lower_bound = mod(pangle - polarAngleBinWidth/2 + 180, 360) - 180;
                upper_bound = mod(pangle + polarAngleBinWidth/2 + 180, 360) - 180;
                
                % Find values within the specified angular bin
                if lower_bound>upper_bound
                    currPA_bool = (retData(1,:) >= lower_bound) | (retData(1,:) <= upper_bound);
                else
                    currPA_bool = (retData(1,:) >= lower_bound) & (retData(1,:) <= upper_bound);
                end
                
                % log the magnitude away from center of the wedge bin:
                currPA_mag = abs(retData(1,:) - pangle);
                    
                % restrict eccentricities to be within a range
                currECC_bool = (retData(2,:) >= minECC) & (retData(2,:) <= maxECC);

                % restrict variance explained to be a certain minimum
                currVAREXP_bool = (retData(3,:) >= minVAREXP);

                % if it meets the 3 criteria
                filterRet = currPA_bool+currECC_bool+currVAREXP_bool == 3;
                validIdx = find(filterRet>0 );

                % find intersection between validIdx and label_idx
                finalIdx = intersect(label_idx, validIdx);

                % isolate ROI activity (with label)
                % mean per PA bin
                meanBOLDpa(ci,pa,ri,si) = mean(currBold(finalIdx));
                medianBOLDpa(ci,pa,ri,si) = median(currBold(finalIdx));
                
                % beta values (all voxels) - for histograms
                allvoxelsBOLDpa(ci,pa,ri,1:length(finalIdx),si) = currBold(finalIdx);
                allparamsBOLDpa(ci,pa,ri,1:length(finalIdx),1,si) = retData(1,finalIdx); % pa
                allparamsBOLDpa(ci,pa,ri,1:length(finalIdx),2,si) = retData(2,finalIdx); % eccen
                allparamsBOLDpa(ci,pa,ri,1:length(finalIdx),3,si) = retData(3,finalIdx); % r^2
                allparamsBOLDpa(ci,pa,ri,1:length(finalIdx),4,si) = currPA_mag(finalIdx); % pa magnitude
                
%                 if length(finalIdx)>nPreallVoxel
%                     disp('WARNING. NOT ENOUGH MEMORY ALLOCATED TO THE allvoxelsBOLDpa')
%                     disp('THIS WILL RESULT IN TRUCTATION.')
%                 else
%                     disp('ok')
%                 end

                if ci==1 % only count in the first interation to avoid redundancy
                    countBin(pa, ri, si) = length(finalIdx);
                end

            end

        end
    end

end


%%

% roi=1;
% for si=1:numel(subjects)
%     subjects(si)
%     rois(roi)
%     cardinaldir_cardloc = medianBOLDpa(1,[1,3,5,7],roi,si);
%     obliquedir_cardloc = medianBOLDpa(2,[1,3,5,7],roi,si);
%     cardinaldir_obliqloc = medianBOLDpa(1,[2,4,6,8],roi,si);
%     obliquedir_obliqloc = medianBOLDpa(2,[2,4,6,8],roi,si);
%     
%     disp('Cardinal advantage at cardinal locs:')
%     %cardinaldir_cardloc-obliquedir_cardloc
%     nanmean(cardinaldir_cardloc-obliquedir_cardloc)
%     disp('Cardinal advantage at oblique locs:')
%     %cardinaldir_obliqloc-obliquedir_obliqloc
%     nanmean(cardinaldir_obliqloc-obliquedir_obliqloc)
% 
% %     disp('Cardinal effect at cardinal locs vs oblique locs:')
% %     cardinaldir_cardloc-cardinaldir_obliqloc
% 
% %     disp('Oblique effect at Oblique locs vs Cardinal locs:')
% %     obliquedir_obliqloc-obliquedir_cardloc
% end


%%

% Extract relevant motion direction indices
motionDirectionIndices = allConditions; %18:25; %8:15; %26:29; %18:25; %8:15; %8:15; %18:25; %26:29; %

motiondirs = [nan,nan,nan,nan,nan,nan,nan, ...
    0,90,180,270,45,135,225,315, ...
    nan, nan, ...
    0, 180, 90, 270, 45, 225, 135, 315, ...
    0, 90, 45, 135];

% Polar angles in the index order
polarAngles = [90, 45, 0, 315, 270, 225, 180, 135];
%polarAngles = [90, 135, 180, 225, 270, 315, 0, 45];

% Initialize the new matrix for radial, tangential, and other
newMatrix = zeros(3, size(medianBOLDpa, 2), size(medianBOLDpa, 3), size(medianBOLDpa, 4));

for si = 1:size(medianBOLDpa, 4) % subjects
    for ri = 1:size(medianBOLDpa, 3) % region

        for polarIndex = 1:length(polarAngles)
            % Extract data for the current polar angle
            currentPolarData = medianBOLDpa(motionDirectionIndices, polarIndex, ri, si);
            
            radialvals = [];
            tangvals = [];
            othervals = [];
        
            for mi=motionDirectionIndices %8:15 
        
                motionValue = motiondirs(mi);

                currentVal = medianBOLDpa(mi, polarIndex, ri, si);
        
                % check if this is correct - might need to move this out of
                % the for loop
                if strcmp(projectName, 'da')
                    UVM_dir = motionValue;
                    localMotionDirs = deriveLocalMotionfromUVM(UVM_dir, polarAngles);
                    currentlocalMotionDir = localMotionDirs(polarIndex);

                    if ismember(currentlocalMotionDir, [90, 270])
                        radialvals = [radialvals, currentVal]; % this is actually up/down
                    elseif ismember(currentlocalMotionDir, [0, 180])
                        tangvals = [tangvals, currentVal]; % this is actually right/left
                    else
                        othervals = [othervals, currentVal];
                    end

                elseif strcmp(projectName, 'dg')
                    % Compute the distances between motion directions and polar angles
                    distances = abs(polarAngles(polarIndex) - motionValue);
                    
                    % Identify indices for radial, tangential, and other
                    if distances == 0 || distances == 180 % radial
                        radialvals = [radialvals, currentVal];
                    elseif distances == 90 || distances == 270 % tangential
                        tangvals = [tangvals, currentVal];
                    else % other
                        othervals = [othervals, currentVal];
                    end
                end
            end
        
            % Compute the averages and store in the new matrix
            newMatrix(1, polarIndex, ri, si) = mean(radialvals);
            newMatrix(2, polarIndex, ri, si) = mean(tangvals);
            newMatrix(3, polarIndex, ri, si) = mean(othervals);
        end
    end
end

%% Polar plot (POLAR CARDINAL vs POLAR OBLIQUE)

if strcmp(projectName, 'da')
    markerC = 'k';
    colors = {colors_all{1}, colors_all{2}};
elseif strcmp(projectName, 'dg')
    markerC = 'w';
    colors = {colors_all{3}, colors_all{4}};
end

figure
for ri=1:7 %length(rois)

    % Specify the region index
    regionIndex = ri;
    
    % Average the values in the first two rows along the first dimension
    averagedMatrix = mean(newMatrix(1:2, :, :, :), 1); % radial and tangential
    
    % Combine the averaged values with the third row
    polarcardMatrix = cat(1, averagedMatrix, newMatrix(3, :, :, :));
    
    % Extract the relevant conditions for the specified region
    conditions1 = polarcardMatrix(1, :, regionIndex, :);
    conditions2 = polarcardMatrix(2, :, regionIndex, :);
    avgConditions1 = squeeze(conditions1);
    avgConditions2 = squeeze(conditions2);
    
    min_axis1 = min(min(squeeze(min(avgConditions1))));
    min_axis2 = min(min(squeeze(min(avgConditions2))));
    axMIN = customRound(min([min_axis1, min_axis2]));
    max_axis1 = max(max(squeeze(max(avgConditions1))));
    max_axis2 = max(max(squeeze(max(avgConditions2))));
    axMAX = customRound(max([max_axis1, max_axis2]));
    axMIN = axMIN - abs(axMAX-axMIN).*0.05;
    axMAX = axMAX + abs(axMAX-axMIN).*0.05;
    
    % Already averaged across the conditions within subjects < -- already did this in
    % the loop above
    
    % Extract polar angles
    %anglevals = [90, 135, 180, 225, 270, 315, 0, 45];
    anglevals = [90, 45, 0, 315, 270, 225, 180, 135]; % <-- these were manually converted based on the order of polarAngles above (Noah's convention)
    
    vals_1 = nanmean(avgConditions1,2)';
    sem1 = nanstd(avgConditions1,0,2)' ./ sqrt(sum(~isnan(avgConditions1),2)');
    vals_2 = nanmean(avgConditions2,2)';
    sem2 = nanstd(avgConditions2,0,2)' ./ sqrt(sum(~isnan(avgConditions2),2)');
    
    % Plot the data on a polar plot - 
    subplot(2,4,ri)
    
    for subjectIndex = 1:size(medianBOLDpa, 4)
        polarplot([deg2rad(anglevals(end)), deg2rad(anglevals(1))],[vals_1(end), vals_1(1)], 'o-', 'Color', colors{1}, 'LineWidth',1.75,  'MarkerFaceColor', colors{1})
        hold on
        polarplot([deg2rad(anglevals(end)), deg2rad(anglevals(1))],[vals_2(end), vals_2(1)], 'o-', 'Color', colors{2}, 'LineWidth',1.75,  'MarkerFaceColor', colors{2})
        hold on
        p1 = polarplot([deg2rad(anglevals); deg2rad(anglevals)], [vals_1 - sem1; vals_1 + sem1], '-', 'Color', colors{1}, 'LineWidth',1.75);
        hold on
        p2 = polarplot([deg2rad(anglevals); deg2rad(anglevals)], [vals_2 - sem2; vals_2 + sem2], '-', 'Color', colors{2}, 'LineWidth',1.75);
        hold on
%         p3  = polarplot(deg2rad(anglevals), avgConditions1(:, subjectIndex)', 'o', 'Color', [166 97 26]/255);
%         hold on;
%         p4 = polarplot(deg2rad(anglevals), avgConditions2(:, subjectIndex)', 'o', 'Color', [64 176 166]/255);
%         hold on
        polarplot(deg2rad(anglevals),vals_1, 'o-', 'Color', colors{1}, 'MarkerSize', 12,  'LineWidth',1.75,  'MarkerFaceColor', colors{1}, 'MarkerEdgeColor', markerC)
        hold on
        polarplot(deg2rad(anglevals),vals_2, 'o-', 'Color', colors{2}, 'MarkerSize', 12,  'LineWidth',1.75,  'MarkerFaceColor', colors{2}, 'MarkerEdgeColor', markerC)
        hold on
    end
    
    rlim([axMIN, axMAX])
    thetaticks(0:45:315);
    
    if ri==1
        hLegend = legend('Cardinal', 'Oblique', 'Location', 'northeast', 'Box', 'off', 'FontSize', 18);
        % Adjust the position of the legend
        newPosition = get(hLegend, 'Position'); % Get current position
        newPosition(1) = newPosition(1) + 0.1; % Shift the legend to the right by 0.1 normalized units
        set(hLegend, 'Position', newPosition);
    end
    
    ax = gca;
        
    if ri == 5 || ri == 6 || ri == 7 || ri == 1 || ri == 2
        %ax.RLim = [0 2]; %[0 2]; %[0 2]; %[1 3]; %
        ax.RLim = [axes_limits.(projectName).(comparisonName).ROIs_motion.min ...
            axes_limits.(projectName).(comparisonName).ROIs_motion.max];
%     elseif ri == 3
%         ax.RLim = [-.25 2];
    else
        ax = gca;
        %ax.RLim = [-.25 1.75]; %[-1 1];   %[-.25 1.75]; %[0 2]; %
        ax.RLim = [axes_limits.(projectName).(comparisonName).ROIs_early.min ...
            axes_limits.(projectName).(comparisonName).ROIs_early.max];
    end

%     if ri == 5 || ri == 6 || ri == 7
%         ax.RLim = [0 2];
%         temp = linspace(0, 2, 5);
%         ax.RTick =  temp(1:end-1);
%         ax = gca;
%         ax.RLim = [0 2];
%     else
%         ax.RLim = [-0.75 1.25];  % Set the radial limits (adjust as needed)
%     %     ax.RTick =  [-0.0500, 0, 0.0500]; %lineArray(1, 3, 5);
%         temp = linspace(-0.75, 1.25, 5);
%         ax.RTick =  temp(1:end-1);
%         ax = gca;
%         ax.RLim = [-0.75 1.25];
%     end
    
    ax = gca;
    ax.LineWidth = 3;  % Set the line width (adjust as needed)
    ax.GridColor = [0.25 0.25 0.25];
    ax.ThetaTickLabel = {};
    %lineArray = -0.05:0.025:.075; 
    ax.Box = 0;
    %ax.RTickLabel = [];
    title(rois{ri}, 'FontSize', 18)
end

fig1 = gcf;
fig1.Position = [152 810 477 378]; %[152 247 1702 941];

fig1 = gcf;
fig1.Position = [152 569 2143 619];
hold off;
sgtitle(projectName, 'FontSize', 40)

% fig1 = gcf;
% fig1.Position = [152 247 1702 941];
% hold off;

filename = fullfile(figureDir,sprintf('PApolarcardvpolaroblmotionVSstatic%s', rois{regionIndex}));
saveas(gcf, filename, 'pdf');


%% POLAR CARDINAL vs POLAR OBLIQUE - Combine Polar Angle
% Plot mean across polar angles 
% keep in mind that this equally weighs each PA, whereas there could be
% differential # of voxels representing the PAs

figure

for ii=1:length(rois)

    % Specify the region index
    regionIndex = ii;

    % Average the values in the first two rows along the first dimension
    averagedMatrix = mean(newMatrix(1:2, :, :, :), 1); % radial and tangential
    
    % Combine the averaged values with the third row
    polarcardMatrix = cat(1, averagedMatrix, newMatrix(3, :, :, :));
    
    % Extract the relevant conditions for the specified region
    conditions1 = polarcardMatrix(1, :, regionIndex, :);
    conditions2 = polarcardMatrix(2, :, regionIndex, :);
    avgConditions1 = squeeze(conditions1);
    avgConditions2 = squeeze(conditions2);
    
    min_axis1 = min(min(squeeze(min(avgConditions1))));
    min_axis2 = min(min(squeeze(min(avgConditions2))));
    axMIN = customRound(min([min_axis1, min_axis2]));
    max_axis1 = max(max(squeeze(max(avgConditions1))));
    max_axis2 = max(max(squeeze(max(avgConditions2))));
    axMAX = customRound(max([max_axis1, max_axis2]));
    axMIN = axMIN - abs(axMAX-axMIN).*0.05;
    axMAX = axMAX + abs(axMAX-axMIN).*0.05;
    
    % Already averaged across the conditions within subjects < -- already did this in
    % the loop above
    
    % Extract polar angles
    anglevals = [90, 135, 180, 225, 270, 315, 0, 45];
    %anglevals = [90, 45, 0, 315, 270, 225, 180, 135]; % <-- these were manually converted based on the order of polarAngles above (Noah's convention)
    
    vals_1 = nanmean(avgConditions1,1)';
    vals_2 = nanmean(avgConditions2,1)';

    vals_1_overall = nanmean(avgConditions1,'all')';
    vals_2_overall = nanmean(avgConditions2,'all')';
    %sem1 = nanstd(avgConditions1,0,2)' ./ sqrt(sum(~isnan(avgConditions1),2)');
    %sem2 = nanstd(avgConditions2,0,2)' ./ sqrt(sum(~isnan(avgConditions2),2)');
    
    % Plot the data on a polar plot
    subplot(2,5,ii)
    
    for subjectIndex = 1:size(medianBOLDpa, 4)
        scatter(1, vals_1(subjectIndex),  30, 'MarkerFaceColor', colors_rgb(subjectIndex,:), 'MarkerEdgeColor', 'none'); %, [139/255, 69/255, 19/255]
        hold on
        scatter(2, vals_2(subjectIndex), 30, 'MarkerFaceColor', colors_rgb(subjectIndex,:), 'MarkerEdgeColor', 'none'); %, [0/255, 139/255, 139/255]
        plot([1 2], [vals_1(subjectIndex) vals_2(subjectIndex)], 'Color', colors_rgb(subjectIndex,:));  %; %'k')
        xlim([0 3])
        %ylim([-0.15 0.25])
    end
    
    scatter(1, vals_1_overall, 70, 'MarkerFaceColor', colors{1}, 'MarkerEdgeColor', 'black');
    hold on
    scatter(2, vals_2_overall,  70, 'MarkerFaceColor', colors{2}, 'MarkerEdgeColor', 'black');
    plot([1 2], [vals_1_overall vals_2_overall], 'k', 'LineWidth', 3)
    
    title(sprintf('BOLD per polar angle in %s',rois{regionIndex}));
    ylabel('PSC')
    set(gca, 'XTick', []);

%     if ii==1
%         legend('PolarCard', 'PolarObl', 'Location', 'northeast');
%     end

    hold off;
end

sgtitle(projectName, 'FontSize', 40)
fa = gcf;
fa.Position = [1000 555 1514 782];

%% Polar plot (RADIAL / TANGENTIAL)

if strcmp(projectName, 'dg')
    % Plot the data on a polar plot
    figure;
    
    for ri=1:length(rois)
    
        % Specify the region index
        regionIndex = ri;
        
        % Extract the relevant conditions for the specified region
        conditions1 = newMatrix(1, :, regionIndex, :);
        conditions2 = newMatrix(2, :, regionIndex, :);
        avgConditions1 = squeeze(conditions1);
        avgConditions2 = squeeze(conditions2);
        
        min_axis1 = min(min(squeeze(min(avgConditions1))));
        min_axis2 = min(min(squeeze(min(avgConditions2))));
        axMIN = customRound(min([min_axis1, min_axis2]));
        max_axis1 = max(max(squeeze(max(avgConditions1))));
        max_axis2 = max(max(squeeze(max(avgConditions2))));
        axMAX = customRound(max([max_axis1, max_axis2]));
        axMIN = axMIN - abs(axMAX-axMIN).*0.05;
        axMAX = axMAX + abs(axMAX-axMIN).*0.05;
        
        % Already averaged across the conditions within subjects < -- already did this in
        % the loop above
        
        % Extract polar angles
        %anglevals = [90, 135, 180, 225, 270, 315, 0, 45];
        anglevals = [90, 45, 0, 315, 270, 225, 180, 135]; % <-- these were manually converted based on the order of polarAngles above (Noah's convention)
        
        vals_1 = nanmean(avgConditions1,2)';
        %vals_1 = avgConditions1(:,1);  for only subj1
        sem1 = nanstd(avgConditions1,0,2)' ./ sqrt(sum(~isnan(avgConditions1),2)');
        vals_2 = nanmean(avgConditions2,2)';
        %vals_2 = avgConditions2(:,1);  for only subj1
        sem2 = nanstd(avgConditions2,0,2)' ./ sqrt(sum(~isnan(avgConditions2),2)');
        
    
        subplot(2,4,ri)
    %     for subjectIndex = 1:size(medianBOLDpa, 4)
    %         p1  = polarplot(deg2rad(anglevals), avgConditions1(:, subjectIndex)', 'o', 'Color', [176/255, 224/255, 230/255]);
    %         hold on;
    %         p2 = polarplot(deg2rad(anglevals), avgConditions2(:,
    %         subjectIndex)', 'o', 'Color', 'r');
    %         hold on
    %     
    %     end
        
    %     hold on
        polarplot([deg2rad(anglevals(end)), deg2rad(anglevals(1))],[vals_1(end), vals_1(1)], 'o-', 'Color', [146 197 222]/255, 'LineWidth',1.75,  'MarkerFaceColor', [146 197 222]/255)
        hold on
        polarplot([deg2rad(anglevals(end)), deg2rad(anglevals(1))],[vals_2(end), vals_2(1)], 'o-', 'Color', [202 0 32]/255, 'LineWidth',1.75,  'MarkerFaceColor', [202 0 32]/255)
        hold on
        p3 = polarplot([deg2rad(anglevals); deg2rad(anglevals)], [vals_1 - sem1; vals_1 + sem1], '-', 'Color', [146 197 222]/255, 'LineWidth',1.75);
        hold on
        p4 = polarplot([deg2rad(anglevals); deg2rad(anglevals)], [vals_2 - sem2; vals_2 + sem2], '-', 'Color', [202 0 32]/255, 'LineWidth',1.75);
        hold on
        polarplot(deg2rad(anglevals),vals_1, 'o-','MarkerSize', 12,  'Color', [146 197 222]/255, 'LineWidth',1.75,  'MarkerFaceColor', [146 197 222]/255, 'MarkerEdgeColor', 'w')
        hold on
        polarplot(deg2rad(anglevals),vals_2, 'o-','MarkerSize', 12,  'Color', [202 0 32]/255, 'LineWidth',1.75,  'MarkerFaceColor', [202 0 32]/255,  'MarkerEdgeColor', 'w')
        hold on 
        
    %     rlim([axMIN, axMAX])
        thetaticks(0:45:315);
        
    %     title(sprintf('BOLD per polar angle in %s (PSC)',rois{regionIndex}));
    % 
        if ri==1
            hLegend = legend('Radial', 'Tangential', 'Location', 'northeast', 'Box', 'off', 'FontSize', 18);
            % Adjust the position of the legend
            newPosition = get(hLegend, 'Position'); % Get current position
            newPosition(1) = newPosition(1) + 0.1; % Shift the legend to the right by 0.1 normalized units
            set(hLegend, 'Position', newPosition);
        end
        
        ax = gca;
    
        if ri == 5 || ri == 6 || ri == 7
            ax.RLim = [-0.25 2]; %[0 2];%[-0.25 2]; %[1 3]; %
        %elseif ri == 1
        %    ax.RLim = [-.75 1.25]; % get rid of this later
        elseif ri == 3
            ax.RLim = [0 2.25]; % orientation only
        else
            ax = gca;
            ax.RLim = [-.25 2]; %[-1 1]; %  [-.25 2]; %[0 2]; %
        end
    
    %     if ri == 5 || ri == 6 || ri == 7
    %         ax.RLim = [0 2];
    %         temp = linspace(0, 2, 5);
    %         ax.RTick =  temp(1:end-1);
    %         ax = gca;
    %         ax.RLim = [0 2];
    %     else
    %         ax.RLim = [-0.75 1.25];  % Set the radial limits (adjust as needed)
    %     %     ax.RTick =  [-0.0500, 0, 0.0500]; %lineArray(1, 3, 5);
    %         temp = linspace(-0.75, 1.25, 5);
    %         ax.RTick =  temp(1:end-1);
    %         ax = gca;
    %         ax.RLim = [-0.75 1.25];
    %     end
        
        ax = gca;
        ax.LineWidth = 3;  % Set the line width (adjust as needed)
        ax.GridColor = [0.25 0.25 0.25];
        ax.ThetaTickLabel = {};
        %lineArray = -0.05:0.025:.075; 
        ax.Box = 0;
        %ax.RTickLabel = [];
        title(rois{ri}, 'FontSize', 18)
    
    
    end
    
    fig1 = gcf;
    fig1.Position = [152 810 477 378]; %[152 247 1702 941];
    
    fig1 = gcf;
    fig1.Position = [152 569 2143 619];
    hold off;
    
    
    % fig1 = gcf;
    % fig1.Position = [152 247 1702 941];
    % hold off;
    sgtitle(projectName, 'FontSize', 40)
    
    filename = fullfile(figureDir,sprintf('PAradialvtangmotionVSstatic%s', rois{regionIndex}));
    saveas(gcf, filename, 'pdf');
end


%% RADIAL / TANGENTIAL - Combine Polar Angle
% Plot mean across polar angles 
% keep in mind that this equally weighs each PA, whereas there could be
% differential # of voxels representing the PAs

if strcmp(projectName, 'dg')
    figure
    
    for ii=1:length(rois)
    
        % Specify the region index
        regionIndex = ii;
    
        % Extract the relevant conditions for the specified region
        conditions1 = newMatrix(1, :, regionIndex, :);
        conditions2 = newMatrix(2, :, regionIndex, :);
        avgConditions1 = squeeze(conditions1);
        avgConditions2 = squeeze(conditions2);
        
        min_axis1 = min(min(squeeze(min(avgConditions1))));
        min_axis2 = min(min(squeeze(min(avgConditions2))));
        axMIN = customRound(min([min_axis1, min_axis2]));
        max_axis1 = max(max(squeeze(max(avgConditions1))));
        max_axis2 = max(max(squeeze(max(avgConditions2))));
        axMAX = customRound(max([max_axis1, max_axis2]));
        axMIN = axMIN - abs(axMAX-axMIN).*0.05;
        axMAX = axMAX + abs(axMAX-axMIN).*0.05;
        
        % Already averaged across the conditions within subjects < -- already did this in
        % the loop above
        
        % Extract polar angles
        %anglevals = [90, 135, 180, 225, 270, 315, 0, 45];
        anglevals = [90, 45, 0, 315, 270, 225, 180, 135]; % <-- these were manually converted based on the order of polarAngles above (Noah's convention)
        
        vals_1 = nanmean(avgConditions1,1)';
        vals_2 = nanmean(avgConditions2,1)';
    
        vals_1_overall = nanmean(avgConditions1,'all')';
        vals_2_overall = nanmean(avgConditions2,'all')';
        %sem1 = nanstd(avgConditions1,0,2)' ./ sqrt(sum(~isnan(avgConditions1),2)');
        %sem2 = nanstd(avgConditions2,0,2)' ./ sqrt(sum(~isnan(avgConditions2),2)');
        
        % Plot the data on a polar plot
        subplot(2,5,ii)
        
        for subjectIndex = 1:size(medianBOLDpa, 4)
            scatter(1, vals_1(subjectIndex),  30, 'MarkerFaceColor', colors(subjectIndex,:), 'MarkerEdgeColor', 'none'); %, [176/255, 224/255, 230/255]
            hold on
            scatter(2, vals_2(subjectIndex), 30, 'MarkerFaceColor', colors(subjectIndex,:), 'MarkerEdgeColor', 'none'); %, 'r'
            plot([1 2], [vals_1(subjectIndex) vals_2(subjectIndex)], 'Color', colors(subjectIndex,:));   %'k')
            xlim([0 3])
            %ylim([-0.15 0.26])
        end
        
        scatter(1, vals_1_overall, 70, 'MarkerFaceColor', [176/255, 224/255, 230/255], 'MarkerEdgeColor', 'black');
        hold on
        scatter(2, vals_2_overall,  70, 'MarkerFaceColor', 'r', 'MarkerEdgeColor', 'black');
        plot([1 2], [vals_1_overall vals_2_overall], 'k', 'LineWidth', 3)
        
        title(sprintf('BOLD per polar angle in %s',rois{regionIndex}));
        ylabel('PSC')
        set(gca, 'XTick', []);
    
        if ii==1
            legend('Radial', 'Tangential', 'Location', 'northeast');
        end
    
        hold off;
    end
    
    fa = gcf;
    fa.Position = [1000 555 1514 782];
    
    % filename = fullfile(figureDir,sprintf('PAradialvtangmotionVSstatic%s', rois{regionIndex}));
    % saveas(gcf, filename, 'pdf');
end
